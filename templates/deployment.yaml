apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "..fullname" . }}
  labels:
    {{- include "..labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "..selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "..selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "..serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: "DATABASE_TYPE"
            value: "{{ .Values.authorizer.database_type }}"
          {{- if .Values.authorizer.database_url }}
          - name: "DATABASE_URL"
            valueFrom:
              secretKeyRef:
                name: database-url
                key: database_url
          {{- end }}
          {{- if .Values.authorizer.database_host }}
          - name: "DATABASE_HOST"
            valueFrom:
              secretKeyRef:
                name: database-host
                key: database_host
          {{- end }}
          {{- if .Values.authorizer.database_username }}
          - name: "DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                name: database-username
                key: database_username
          {{- end }}
          {{- if .Values.authorizer.database_password }}
          - name: "DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: database-password
                key: database_password
          {{- end }}
          {{- if .Values.authorizer.database_cert }}
          - name: "DATABASE_CERT"
            valueFrom:
              secretKeyRef:
                name: database-cert
                key: database_cert
          {{- end }}
          {{- if .Values.authorizer.database_cert_key }}
          - name: "DATABASE_CERT_KEY"
            valueFrom:
              secretKeyRef:
                name: database-cert-key
                key: database_cert_key
          {{- end }}
          {{- if .Values.authorizer.database_ca_cert }}
          - name: "DATABASE_CA_CERT"
            valueFrom:
              secretKeyRef:
                name: database-ca-cert
                key: database_ca_cert
          {{- end }}
          {{- if .Values.authorizer.redis_url }}
          - name: "REDIS_URL"
            valueFrom:
              secretKeyRef:
                name: redis-url
                key: redis_url
          {{- else if not .Values.authorizer.redis_url }}
          {{- if .Values.redis.install }}
          - name: "REDIS_URL"
            value: "{{- printf "redis://redis.%s.svc.cluster.local" .Release.Namespace }}"
          {{- end }}
          {{- end }}
          {{- if .Values.authorizer.aws_access_key_id }}
          - name: "AWS_ACCESS_KEY_ID"
            valueFrom:
              secretKeyRef:
                name: aws-access-key-id
                key: aws_access_key_id
          {{- end }}
          {{- if .Values.authorizer.aws_secret_access_key }}
          - name: "AWS_SECRET_ACCESS_KEY"
            valueFrom:
              secretKeyRef:
                name: aws-secret-access-key
                key: aws_secret_access_key
          {{- end }}
          {{- if .Values.authorizer.aws_region }}
          - name: AWS_REGION
            value: "{{ .Values.authorizer.aws_region }}"
          {{- end }}

          {{- if .Values.extraEnv }}
          {{- toYaml .Values.extraEnv | nindent 5 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
